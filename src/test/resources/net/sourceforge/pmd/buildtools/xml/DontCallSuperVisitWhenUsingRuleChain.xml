<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">
    <test-code>
        <description>RuleChain with super</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.buildtools.testsupport;

import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;

public class MyRule extends AbstractJavaRule {
    public MyRule() {
        addRuleChainVisit(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        return super.visit(node, data);
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description>RuleChain without super</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.buildtools.testsupport;

import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;

public class MyRule extends AbstractJavaRule {
    public MyRule() {
        addRuleChainVisit(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        return data;
    }
}
     ]]></code>
    </test-code>
    <test-code>
        <description>RuleChain with visitor as nested class</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
package net.sourceforge.pmd.buildtools.testsupport;

import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;
import net.sourceforge.pmd.lang.java.rule.AbstractJavaRule;

public class MyRule extends AbstractJavaRule {
    public MyRule() {
        addRuleChainVisit(ASTCompilationUnit.class);
    }

    @Override
    public Object visit(ASTCompilationUnit node, Object data) {
        node.jjtAccept(new Visitor(), data);
        return data;
    }

    private static class Visitor extends JavaParserVisitorAdapter {
        @Override
        public Object visit(ASTLiteral node, Object data) {
            return super.visit(node, data);
        }
    }
}
        ]]></code>
    </test-code>
</test-data>
